For speedup, I used a randomly generated puzzle. It can be run with 
tower(4,T,counts([2,2,1,2],[2,1,4,3],[3,4,1,2],[2,1,2,2]))
and the answer is indeed 
T = [[2,3,4,1],[1,2,3,4],[4,1,2,3],[3,4,1,2]] 
by checking the website:
https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/towers.html#4:2/2/1/2/2/1/4/3/3/4/1/2/2/1/2/2

The speedup I get is 1.0023 times faster for tower, and calling plain_tower for N= 5 takes so long, so this is the speedup for N=4.

I used this to generate the ambiguous puzzle
| ?- ambiguous(5,C,T1,T2).

C = counts([4,2,3,2,1],[1,3,2,3,2],[5,3,2,3,1],[1,2,3,2,2])
T1 = [[1,2,3,4,5],[2,1,4,5,3],[4,5,2,3,1],[3,4,5,1,2],[5,3,1,2,4]]
T2 = [[1,2,3,4,5],[3,1,4,5,2],[4,5,2,3,1],[2,4,5,1,3],[5,3,1,2,4]] ?

(15596 ms) yes
